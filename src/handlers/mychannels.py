from . import *
from aiogram.filters.chat_member_updated import \
    ChatMemberUpdatedFilter, IS_NOT_MEMBER, MEMBER, ADMINISTRATOR
from aiogram.types import ChatMemberUpdated
from utils.db.user import User

from utils.db.my_channels import Channel

router = Router()


@router.my_chat_member(ChatMemberUpdatedFilter( member_status_changed=IS_NOT_MEMBER >> ADMINISTRATOR))
async def bot_added_as_admin(event: ChatMemberUpdated, bot):
    """
    –õ–æ–≤–∏—Ç —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∫–∞–∫ –ê–¥–º–∏–Ω–∞ –∏ –∑–∞–Ω–æ—Å–∏—Ç —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –≤ –ë–î
    """
    # print(event)
    Channel().add_channel(name=event.chat.title, url_id=event.chat.id)
    await bot.send_message(
        chat_id=User().get_first_trusted_user(),
        text=f'''
‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! 
–Ø —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {event.chat.title} –∫–∞–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–∞–º –Ω–æ–≤–æ—Å—Ç–∏.

–°–ø–∏—Å–æ–∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª—ë–Ω'''
    )


@router.message(F.text == '–ú–æ–∏ –∫–∞–Ω–∞–ª—ã')
async def _my_channels(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()

    if my_channels() == None:
         await message.answer(
             text='–ü–æ–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç—É :( \n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
         )
    else:

        await message.answer(
            text='üì¢ –ó–¥–µ—Å—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç–∏. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ - –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            reply_markup=my_channels()
        )


# –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith('channel:'), StateFilter(None))
async def get_one_my_channel(call: types.CallbackQuery):
    channel_id = int(call.data.split(":")[1])
    channel = Channel().get_channel_name_by_id(channel_id=channel_id)

    await call.message.edit_text(
        text=f'üì¢ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª {channel}',
        reply_markup=under_channel_for_my_channels(channel_id=channel_id)
    )


# —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data.startswith('remove_channel'))
async def remove_my_channel(call: types.CallbackQuery):
    channel_id = int(call.data.split(":")[1])
    channel = Channel().get_channel_name_by_id(channel_id)

    try:
        Channel().remove_channel(channel_id=channel_id)
        await call.message.delete()
        await call.message.answer(text='‚òë –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.')
        if my_channels() == None:
            await call.message.edit_text(
                text='–ü–æ–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç—É :( \n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            )
        else:

            await call.message.edit_text(
                text='üì¢ –ó–¥–µ—Å—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç–∏. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ - –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                reply_markup=my_channels()
            )
    except Exception as e:
        await call.message.answer(text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ - {e}.')


class AddingMyChannel(StatesGroup):
    to_set_name = State()
    to_set_link = State()




